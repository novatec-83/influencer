{"remainingRequest":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@swimlane/ngx-datatable/release/utils/sort.js","dependencies":[{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@swimlane/ngx-datatable/release/utils/sort.js","mtime":1499611568000},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/cache-loader/dist/cjs.js","mtime":1549951013815},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"../types\");\nvar column_prop_getters_1 = require(\"./column-prop-getters\");\n/**\n * Gets the next sort direction\n * @param  {SortType}      sortType\n * @param  {SortDirection} currentSort\n * @return {SortDirection}\n */\nfunction nextSortDir(sortType, current) {\n    if (sortType === types_1.SortType.single) {\n        if (current === types_1.SortDirection.asc) {\n            return types_1.SortDirection.desc;\n        }\n        else {\n            return types_1.SortDirection.asc;\n        }\n    }\n    else {\n        if (!current) {\n            return types_1.SortDirection.asc;\n        }\n        else if (current === types_1.SortDirection.asc) {\n            return types_1.SortDirection.desc;\n        }\n        else if (current === types_1.SortDirection.desc) {\n            return undefined;\n        }\n    }\n}\nexports.nextSortDir = nextSortDir;\n/**\n * Adapted from fueld-ui on 6/216\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\n * @param  {any}    a\n * @param  {any}    b\n * @return {number} position\n */\nfunction orderByComparator(a, b) {\n    if (a === null || typeof a === 'undefined')\n        a = 0;\n    if (b === null || typeof b === 'undefined')\n        b = 0;\n    if (a instanceof Date && b instanceof Date) {\n        if (a < b)\n            return -1;\n        if (a > b)\n            return 1;\n    }\n    else if ((isNaN(parseFloat(a)) || !isFinite(a)) || (isNaN(parseFloat(b)) || !isFinite(b))) {\n        // Convert to string in case of a=0 or b=0\n        a = String(a);\n        b = String(b);\n        // Isn't a number so lowercase the string to properly compare\n        if (a.toLowerCase() < b.toLowerCase())\n            return -1;\n        if (a.toLowerCase() > b.toLowerCase())\n            return 1;\n    }\n    else {\n        // Parse strings as numbers to compare properly\n        if (parseFloat(a) < parseFloat(b))\n            return -1;\n        if (parseFloat(a) > parseFloat(b))\n            return 1;\n    }\n    // equal each other\n    return 0;\n}\nexports.orderByComparator = orderByComparator;\n/**\n * Sorts the rows\n *\n * @export\n * @param {any[]} rows\n * @param {any[]} columns\n * @param {any[]} dirs\n * @returns\n */\nfunction sortRows(rows, columns, dirs) {\n    if (!rows || !dirs || !dirs.length || !columns)\n        return rows;\n    var temp = rows.slice();\n    var cols = columns.reduce(function (obj, col) {\n        if (col.comparator && typeof col.comparator === 'function') {\n            obj[col.prop] = col.comparator;\n        }\n        return obj;\n    }, {});\n    // cache valueGetter and compareFn so that they\n    // do not need to be looked-up in the sort function body\n    var cachedDirs = dirs.map(function (dir) {\n        var prop = dir.prop;\n        return {\n            prop: prop,\n            dir: dir.dir,\n            valueGetter: column_prop_getters_1.getterForProp(prop),\n            compareFn: cols[prop] || orderByComparator\n        };\n    });\n    return temp.sort(function (a, b) {\n        for (var _i = 0, cachedDirs_1 = cachedDirs; _i < cachedDirs_1.length; _i++) {\n            var cachedDir = cachedDirs_1[_i];\n            var prop = cachedDir.prop, valueGetter = cachedDir.valueGetter;\n            var propA = valueGetter(a, prop);\n            var propB = valueGetter(b, prop);\n            var comparison = cachedDir.dir !== types_1.SortDirection.desc ?\n                cachedDir.compareFn(propA, propB) :\n                -cachedDir.compareFn(propA, propB);\n            // Don't return 0 yet in case of needing to sort by next property\n            if (comparison !== 0)\n                return comparison;\n        }\n        // equal each other\n        return 0;\n    });\n}\nexports.sortRows = sortRows;\n//# sourceMappingURL=sort.js.map",null]}