{"remainingRequest":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@swimlane/ngx-charts/release/common/area-tooltip.component.js","dependencies":[{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@swimlane/ngx-charts/release/common/area-tooltip.component.js","mtime":1495471598000},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/cache-loader/dist/cjs.js","mtime":1549951013815},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, Output, EventEmitter, ViewChildren, Renderer, ChangeDetectionStrategy, } from '@angular/core';\nimport { trigger, style, animate, transition } from '@angular/animations';\nvar AreaTooltip = /*@__PURE__*/ (function () {\n    function AreaTooltip(renderer) {\n        this.renderer = renderer;\n        this.anchorOpacity = new Array();\n        this.showPercentage = false;\n        this.tooltipDisabled = false;\n        this.hover = new EventEmitter();\n    }\n    AreaTooltip.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    AreaTooltip.prototype.update = function () {\n        this.tooltipAreas = this.getTooltipAreas();\n    };\n    AreaTooltip.prototype.getTooltipAreas = function () {\n        var _this = this;\n        var uniqueSet = this.getUniqueValues(this.xSet);\n        uniqueSet = uniqueSet.sort(function (a, b) {\n            return _this.xScale(a) - _this.xScale(b);\n        });\n        var results = [];\n        for (var i = 0; i < uniqueSet.length; i++) {\n            var val = uniqueSet[i];\n            var ob = {};\n            ob.tooltipAnchor = this.xScale(val);\n            if (i === 0) {\n                ob.x0 = this.xScale(val);\n            }\n            else {\n                ob.x0 = (this.xScale(uniqueSet[i - 1]) + this.xScale(uniqueSet[i])) / 2;\n            }\n            if (i === uniqueSet.length - 1) {\n                ob.x1 = this.xScale(uniqueSet[i]);\n            }\n            else {\n                ob.x1 = (this.xScale(uniqueSet[i]) + this.xScale(uniqueSet[i + 1])) / 2;\n            }\n            ob.width = ob.x1 - ob.x0;\n            ob.value = val;\n            ob.values = this.getValues(val);\n            results.push(ob);\n            this.anchorOpacity[i] = 0;\n        }\n        return results;\n    };\n    AreaTooltip.prototype.getValues = function (xVal) {\n        var results = [];\n        for (var _i = 0, _a = this.results; _i < _a.length; _i++) {\n            var group = _a[_i];\n            var item = group.series.find(function (d) { return d.name.toString() === xVal.toString(); });\n            var groupName = group.name;\n            if (groupName instanceof Date) {\n                groupName = groupName.toLocaleDateString();\n            }\n            if (item) {\n                var label = item.name;\n                if (label instanceof Date) {\n                    label = label.toLocaleDateString();\n                }\n                var val = item.value;\n                if (this.showPercentage) {\n                    val = (item.d1 - item.d0).toFixed(2) + '%';\n                }\n                var color = void 0;\n                if (this.colors.scaleType === 'linear') {\n                    var v = val;\n                    if (item.d1) {\n                        v = item.d1;\n                    }\n                    color = this.colors.getColor(v);\n                }\n                else {\n                    color = this.colors.getColor(group.name);\n                }\n                results.push({\n                    value: val,\n                    name: label,\n                    series: groupName,\n                    min: item.min,\n                    max: item.max,\n                    color: color\n                });\n            }\n        }\n        return results;\n    };\n    AreaTooltip.prototype.getUniqueValues = function (array) {\n        var results = [];\n        var _loop_1 = function (i) {\n            var val = array[i];\n            var exists = results.find(function (v) {\n                return v.toString() === val.toString();\n            });\n            if (!exists) {\n                results.push(val);\n            }\n        };\n        for (var i = 0; i < array.length; i++) {\n            _loop_1(i);\n        }\n        return results;\n    };\n    AreaTooltip.prototype.showTooltip = function (index) {\n        var tooltipAnchor = this.tooltips.toArray()[index].nativeElement.getElementsByTagName('rect')[1];\n        var event = new MouseEvent('mouseenter', { bubbles: false });\n        this.renderer.invokeElementMethod(tooltipAnchor, 'dispatchEvent', [event]);\n        this.anchorOpacity[index] = 0.7;\n        this.hover.emit(this.tooltipAreas[index]);\n    };\n    AreaTooltip.prototype.hideTooltip = function (index) {\n        var tooltipAnchor = this.tooltips.toArray()[index].nativeElement.getElementsByTagName('rect')[1];\n        var event = new MouseEvent('mouseleave', { bubbles: false });\n        this.renderer.invokeElementMethod(tooltipAnchor, 'dispatchEvent', [event]);\n        this.anchorOpacity[index] = 0;\n    };\n    AreaTooltip.prototype.getToolTipText = function (tooltipItem) {\n        var result = '';\n        if (tooltipItem.series !== undefined) {\n            result += tooltipItem.series;\n        }\n        else {\n            result += '???';\n        }\n        result += ': ';\n        if (tooltipItem.value !== undefined) {\n            result += tooltipItem.value.toLocaleString();\n        }\n        if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n            result += ' (';\n            if (tooltipItem.min !== undefined) {\n                if (tooltipItem.max === undefined) {\n                    result += '≥';\n                }\n                result += tooltipItem.min.toLocaleString();\n                if (tooltipItem.max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (tooltipItem.max !== undefined) {\n                result += '≤';\n            }\n            if (tooltipItem.max !== undefined) {\n                result += tooltipItem.max.toLocaleString();\n            }\n            result += ')';\n        }\n        return result;\n    };\n    return AreaTooltip;\n}());\nexport { AreaTooltip };\n//# sourceMappingURL=area-tooltip.component.js.map \n",null]}