{"remainingRequest":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/ng-sidebar/lib/sidebar-container.component.js","dependencies":[{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/ng-sidebar/lib/sidebar-container.component.js","mtime":1497055971000},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/cache-loader/dist/cjs.js","mtime":1549951013815},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar common_1 = require(\"@angular/common\");\n// Based on https://github.com/angular/material2/tree/master/src/lib/sidenav\nvar SidebarContainer = /*@__PURE__*/ (function () {\n    function SidebarContainer(_ref, platformId) {\n        this._ref = _ref;\n        this.animate = true;\n        this.allowSidebarBackdropControl = true;\n        this.showBackdrop = false;\n        this.showBackdropChange = new core_1.EventEmitter();\n        this._sidebars = [];\n        this._isBrowser = common_1.isPlatformBrowser(platformId);\n    }\n    SidebarContainer.prototype.ngAfterContentInit = function () {\n        if (!this._isBrowser) {\n            return;\n        }\n        this._onToggle();\n    };\n    SidebarContainer.prototype.ngOnChanges = function (changes) {\n        if (!this._isBrowser) {\n            return;\n        }\n        if (changes['showBackdrop']) {\n            this.showBackdropChange.emit(changes['showBackdrop'].currentValue);\n        }\n    };\n    SidebarContainer.prototype.ngOnDestroy = function () {\n        if (!this._isBrowser) {\n            return;\n        }\n        this._unsubscribe();\n    };\n    /**\n     * @internal\n     *\n     * Adds a sidebar to the container's list of sidebars.\n     *\n     * @param sidebar {Sidebar} A sidebar within the container to register.\n     */\n    SidebarContainer.prototype._addSidebar = function (sidebar) {\n        this._sidebars.push(sidebar);\n        this._subscribe(sidebar);\n    };\n    /**\n     * @internal\n     *\n     * Removes a sidebar from the container's list of sidebars.\n     *\n     * @param sidebar {Sidebar} The sidebar to remove.\n     */\n    SidebarContainer.prototype._removeSidebar = function (sidebar) {\n        var index = this._sidebars.indexOf(sidebar);\n        if (index !== -1) {\n            this._sidebars.splice(index, 1);\n        }\n    };\n    /**\n     * @internal\n     *\n     * Computes `margin` value to push page contents to accommodate open sidebars as needed.\n     *\n     * @return {CSSStyleDeclaration} margin styles for the page content.\n     */\n    SidebarContainer.prototype._getContentStyles = function () {\n        var left = 0, right = 0, top = 0, bottom = 0;\n        var transformStyle = null;\n        var heightStyle = null;\n        var widthStyle = null;\n        for (var _i = 0, _a = this._sidebars; _i < _a.length; _i++) {\n            var sidebar = _a[_i];\n            var isLeftOrRight = sidebar.position === 'left' || sidebar.position === 'right';\n            // Slide mode: we need to translate the entire container\n            if (sidebar._isModeSlide) {\n                if (sidebar.opened) {\n                    var isLeftOrTop = sidebar.position === 'left' || sidebar.position === 'top';\n                    var transformDir = isLeftOrRight ? 'X' : 'Y';\n                    var transformAmt = \"\" + (isLeftOrTop ? '' : '-') + (isLeftOrRight ? sidebar._width : sidebar._height);\n                    transformStyle = \"translate\" + transformDir + \"(\" + transformAmt + \"px)\";\n                }\n            }\n            // Create a space for the sidebar\n            if ((sidebar._isModePush && sidebar.opened) || sidebar.dock) {\n                var paddingAmt = 0;\n                if (sidebar._isModeSlide && sidebar.opened) {\n                    var offsetDim = \"calc(100% - \" + sidebar._dockedSize + \"px\";\n                    if (isLeftOrRight) {\n                        widthStyle = offsetDim;\n                    }\n                    else {\n                        heightStyle = offsetDim;\n                    }\n                }\n                else {\n                    if (sidebar._isDocked || (sidebar._isModeOver && sidebar.dock)) {\n                        paddingAmt = sidebar._dockedSize;\n                    }\n                    else {\n                        paddingAmt = isLeftOrRight ? sidebar._width : sidebar._height;\n                    }\n                }\n                switch (sidebar.position) {\n                    case 'left':\n                        left = Math.max(left, paddingAmt);\n                        break;\n                    case 'right':\n                        right = Math.max(right, paddingAmt);\n                        break;\n                    case 'top':\n                        top = Math.max(top, paddingAmt);\n                        break;\n                    case 'bottom':\n                        bottom = Math.max(bottom, paddingAmt);\n                        break;\n                }\n            }\n        }\n        return {\n            padding: top + \"px \" + right + \"px \" + bottom + \"px \" + left + \"px\",\n            webkitTransform: transformStyle,\n            transform: transformStyle,\n            height: heightStyle,\n            width: widthStyle\n        };\n    };\n    /**\n     * @internal\n     *\n     * Closes sidebars when the backdrop is clicked, if they have the\n     * `closeOnClickBackdrop` option set.\n     */\n    SidebarContainer.prototype._onBackdropClicked = function () {\n        for (var _i = 0, _a = this._sidebars; _i < _a.length; _i++) {\n            var sidebar = _a[_i];\n            if (sidebar.opened && sidebar.showBackdrop && sidebar.closeOnClickBackdrop) {\n                sidebar.close();\n            }\n        }\n    };\n    /**\n     * Subscribes from a sidebar events to react properly.\n     */\n    SidebarContainer.prototype._subscribe = function (sidebar) {\n        var _this = this;\n        sidebar.onOpenStart.subscribe(function () { return _this._onToggle(); });\n        sidebar.onOpened.subscribe(function () { return _this._markForCheck(); });\n        sidebar.onCloseStart.subscribe(function () { return _this._onToggle(); });\n        sidebar.onClosed.subscribe(function () { return _this._markForCheck(); });\n        sidebar.onModeChange.subscribe(function () { return _this._markForCheck(); });\n        sidebar.onPositionChange.subscribe(function () { return _this._markForCheck(); });\n        sidebar._onRerender.subscribe(function () { return _this._markForCheck(); });\n    };\n    /**\n     * Unsubscribes from all sidebars.\n     */\n    SidebarContainer.prototype._unsubscribe = function () {\n        for (var _i = 0, _a = this._sidebars; _i < _a.length; _i++) {\n            var sidebar = _a[_i];\n            sidebar.onOpenStart.unsubscribe();\n            sidebar.onOpened.unsubscribe();\n            sidebar.onCloseStart.unsubscribe();\n            sidebar.onClosed.unsubscribe();\n            sidebar.onModeChange.unsubscribe();\n            sidebar.onPositionChange.unsubscribe();\n            sidebar._onRerender.unsubscribe();\n        }\n    };\n    /**\n     * Check if we should show the backdrop when a sidebar is toggled.\n     */\n    SidebarContainer.prototype._onToggle = function () {\n        var _this = this;\n        if (this._sidebars.length > 0 && this.allowSidebarBackdropControl) {\n            // Show backdrop if a single open sidebar has it set\n            var hasOpen = this._sidebars.some(function (sidebar) { return sidebar.opened && sidebar.showBackdrop; });\n            this.showBackdrop = hasOpen;\n            this.showBackdropChange.emit(hasOpen);\n        }\n        setTimeout(function () {\n            _this._markForCheck();\n        });\n    };\n    /**\n     * Triggers change detection to recompute styles.\n     */\n    SidebarContainer.prototype._markForCheck = function () {\n        this._ref.markForCheck();\n    };\n    SidebarContainer.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'ng-sidebar-container',\n                    template: \"\\n    <div *ngIf=\\\"showBackdrop\\\"\\n      aria-hidden=\\\"true\\\"\\n      class=\\\"ng-sidebar__backdrop\\\"\\n      [ngClass]=\\\"backdropClass\\\"\\n      (click)=\\\"_onBackdropClicked()\\\"></div>\\n\\n    <div class=\\\"ng-sidebar__content\\\"\\n      [ngClass]=\\\"sidebarContentClass\\\"\\n      [ngStyle]=\\\"_getContentStyles()\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  \",\n                    styles: [\"\\n    :host {\\n      box-sizing: border-box;\\n      display: block;\\n      overflow: hidden;\\n      position: relative;\\n    }\\n\\n    .ng-sidebar__backdrop {\\n      background: #000;\\n      height: 100%;\\n      left: 0;\\n      opacity: 0.75;\\n      pointer-events: auto;\\n      position: fixed;\\n      top: 0;\\n      width: 100%;\\n      z-index: 99999998;\\n    }\\n\\n    .ng-sidebar__content {\\n      display: block;\\n      height: 100%;\\n    }\\n\\n      :host.ng-sidebar-container--animate .ng-sidebar__content {\\n        -webkit-transition: -webkit-transform 0.3s cubic-bezier(0, 0, 0.3, 1), padding 0.3s cubic-bezier(0, 0, 0.3, 1);\\n        transition: transform 0.3s cubic-bezier(0, 0, 0.3, 1), padding 0.3s cubic-bezier(0, 0, 0.3, 1);\\n      }\\n  \"],\n                    host: {\n                        '[class.ng-sidebar-container--animate]': 'animate'\n                    },\n                    changeDetection: core_1.ChangeDetectionStrategy.OnPush\n                },] },\n    ];\n    SidebarContainer.propDecorators = {\n        'animate': [{ type: core_1.Input },],\n        'allowSidebarBackdropControl': [{ type: core_1.Input },],\n        'showBackdrop': [{ type: core_1.Input },],\n        'showBackdropChange': [{ type: core_1.Output },],\n        'sidebarContentClass': [{ type: core_1.Input },],\n        'backdropClass': [{ type: core_1.Input },],\n    };\n    return SidebarContainer;\n}());\nexports.SidebarContainer = SidebarContainer;\n",null]}