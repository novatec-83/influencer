{"remainingRequest":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/angular-calendar/dist/esm/src/components/day/calendarDayView.component.js","dependencies":[{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/angular-calendar/dist/esm/src/components/day/calendarDayView.component.js","mtime":1494788451000},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/cache-loader/dist/cjs.js","mtime":1549951013815},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, Output, EventEmitter, ChangeDetectorRef, LOCALE_ID, Inject } from '@angular/core';\nimport addMinutes from 'date-fns/add_minutes';\nimport { CalendarDragHelper } from '../../providers/calendarDragHelper.provider';\nimport { CalendarResizeHelper } from '../../providers/calendarResizeHelper.provider';\nimport { CalendarUtils } from '../../providers/calendarUtils.provider';\n/**\n * @hidden\n */\nvar SEGMENT_HEIGHT = 30;\n/**\n * @hidden\n */\nvar MINUTES_IN_HOUR = 60;\n/**\n * Shows all events on a given day. Example usage:\n *\n * ```typescript\n * &lt;mwl-calendar-day-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\"&gt;\n * &lt;/mwl-calendar-day-view&gt;\n * ```\n */\nvar CalendarDayViewComponent = /*@__PURE__*/ (function () {\n    /**\n     * @hidden\n     */\n    function CalendarDayViewComponent(cdr, utils, locale) {\n        this.cdr = cdr;\n        this.utils = utils;\n        /**\n         * An array of events to display on view\n         */\n        this.events = [];\n        /**\n         * The number of segments in an hour. Must be <= 6\n         */\n        this.hourSegments = 2;\n        /**\n         * The day start hours in 24 hour time. Must be 0-23\n         */\n        this.dayStartHour = 0;\n        /**\n         * The day start minutes. Must be 0-59\n         */\n        this.dayStartMinute = 0;\n        /**\n         * The day end hours in 24 hour time. Must be 0-23\n         */\n        this.dayEndHour = 23;\n        /**\n         * The day end minutes. Must be 0-59\n         */\n        this.dayEndMinute = 59;\n        /**\n         * The width in pixels of each event on the view\n         */\n        this.eventWidth = 150;\n        /**\n         * The grid size to snap resizing and dragging of events to\n         */\n        this.eventSnapSize = 30;\n        /**\n         * The placement of the event tooltip\n         */\n        this.tooltipPlacement = 'top';\n        /**\n         * Called when an event title is clicked\n         */\n        this.eventClicked = new EventEmitter();\n        /**\n         * Called when an hour segment is clicked\n         */\n        this.hourSegmentClicked = new EventEmitter();\n        /**\n         * Called when an event is resized or dragged and dropped\n         */\n        this.eventTimesChanged = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.hours = [];\n        /**\n         * @hidden\n         */\n        this.width = 0;\n        this.locale = locale;\n    }\n    /**\n     * @hidden\n     */\n    CalendarDayViewComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.refresh) {\n            this.refreshSubscription = this.refresh.subscribe(function () {\n                _this.refreshAll();\n                _this.cdr.detectChanges();\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    CalendarDayViewComponent.prototype.ngOnDestroy = function () {\n        if (this.refreshSubscription) {\n            this.refreshSubscription.unsubscribe();\n        }\n    };\n    /**\n     * @hidden\n     */\n    CalendarDayViewComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.viewDate ||\n            changes.dayStartHour ||\n            changes.dayStartMinute ||\n            changes.dayEndHour ||\n            changes.dayEndMinute) {\n            this.refreshHourGrid();\n        }\n        if (changes.viewDate ||\n            changes.events ||\n            changes.dayStartHour ||\n            changes.dayStartMinute ||\n            changes.dayEndHour ||\n            changes.dayEndMinute ||\n            changes.eventWidth) {\n            this.refreshView();\n        }\n    };\n    CalendarDayViewComponent.prototype.eventDropped = function (dropEvent, segment) {\n        if (dropEvent.dropData && dropEvent.dropData.event) {\n            this.eventTimesChanged.emit({ event: dropEvent.dropData.event, newStart: segment.date });\n        }\n    };\n    CalendarDayViewComponent.prototype.resizeStarted = function (event, resizeEvent, dayViewContainer) {\n        this.currentResize = {\n            originalTop: event.top,\n            originalHeight: event.height,\n            edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'\n        };\n        var resizeHelper = new CalendarResizeHelper(dayViewContainer);\n        this.validateResize = function (_a) {\n            var rectangle = _a.rectangle;\n            return resizeHelper.validateResize({ rectangle: rectangle });\n        };\n        this.cdr.detectChanges();\n    };\n    CalendarDayViewComponent.prototype.resizing = function (event, resizeEvent) {\n        if (resizeEvent.edges.top) {\n            event.top = this.currentResize.originalTop + +resizeEvent.edges.top;\n            event.height = this.currentResize.originalHeight - +resizeEvent.edges.top;\n        }\n        else if (resizeEvent.edges.bottom) {\n            event.height = this.currentResize.originalHeight + +resizeEvent.edges.bottom;\n        }\n    };\n    CalendarDayViewComponent.prototype.resizeEnded = function (dayEvent) {\n        var pixelsMoved;\n        if (this.currentResize.edge === 'top') {\n            pixelsMoved = (dayEvent.top - this.currentResize.originalTop);\n        }\n        else {\n            pixelsMoved = (dayEvent.height - this.currentResize.originalHeight);\n        }\n        dayEvent.top = this.currentResize.originalTop;\n        dayEvent.height = this.currentResize.originalHeight;\n        var pixelAmountInMinutes = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);\n        var minutesMoved = pixelsMoved * pixelAmountInMinutes;\n        var newStart = dayEvent.event.start;\n        var newEnd = dayEvent.event.end;\n        if (this.currentResize.edge === 'top') {\n            newStart = addMinutes(newStart, minutesMoved);\n        }\n        else if (newEnd) {\n            newEnd = addMinutes(newEnd, minutesMoved);\n        }\n        this.eventTimesChanged.emit({ newStart: newStart, newEnd: newEnd, event: dayEvent.event });\n        this.currentResize = null;\n    };\n    CalendarDayViewComponent.prototype.dragStart = function (event, dayViewContainer) {\n        var _this = this;\n        var dragHelper = new CalendarDragHelper(dayViewContainer, event);\n        this.validateDrag = function (_a) {\n            var x = _a.x, y = _a.y;\n            return !_this.currentResize && dragHelper.validateDrag({ x: x, y: y });\n        };\n        this.cdr.detectChanges();\n    };\n    CalendarDayViewComponent.prototype.eventDragged = function (dayEvent, draggedInPixels) {\n        var pixelAmountInMinutes = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);\n        var minutesMoved = draggedInPixels * pixelAmountInMinutes;\n        var newStart = addMinutes(dayEvent.event.start, minutesMoved);\n        var newEnd;\n        if (dayEvent.event.end) {\n            newEnd = addMinutes(dayEvent.event.end, minutesMoved);\n        }\n        this.eventTimesChanged.emit({ newStart: newStart, newEnd: newEnd, event: dayEvent.event });\n    };\n    CalendarDayViewComponent.prototype.refreshHourGrid = function () {\n        var _this = this;\n        this.hours = this.utils.getDayViewHourGrid({\n            viewDate: this.viewDate,\n            hourSegments: this.hourSegments,\n            dayStart: {\n                hour: this.dayStartHour,\n                minute: this.dayStartMinute\n            },\n            dayEnd: {\n                hour: this.dayEndHour,\n                minute: this.dayEndMinute\n            }\n        });\n        if (this.hourSegmentModifier) {\n            this.hours.forEach(function (hour) {\n                hour.segments.forEach(function (segment) { return _this.hourSegmentModifier(segment); });\n            });\n        }\n    };\n    CalendarDayViewComponent.prototype.refreshView = function () {\n        this.view = this.utils.getDayView({\n            events: this.events,\n            viewDate: this.viewDate,\n            hourSegments: this.hourSegments,\n            dayStart: {\n                hour: this.dayStartHour,\n                minute: this.dayStartMinute\n            },\n            dayEnd: {\n                hour: this.dayEndHour,\n                minute: this.dayEndMinute\n            },\n            eventWidth: this.eventWidth,\n            segmentHeight: SEGMENT_HEIGHT\n        });\n    };\n    CalendarDayViewComponent.prototype.refreshAll = function () {\n        this.refreshHourGrid();\n        this.refreshView();\n    };\n    return CalendarDayViewComponent;\n}());\nexport { CalendarDayViewComponent };\n//# sourceMappingURL=calendarDayView.component.js.map \n",null]}