{"remainingRequest":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@swimlane/ngx-datatable/release/components/body/body-row.component.js","dependencies":[{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@swimlane/ngx-datatable/release/components/body/body-row.component.js","mtime":1499611568000},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/cache-loader/dist/cjs.js","mtime":1549951013815},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar utils_1 = require(\"../../utils\");\nvar services_1 = require(\"../../services\");\nvar DataTableBodyRowComponent = /*@__PURE__*/ (function () {\n    function DataTableBodyRowComponent(scrollbarHelper, element) {\n        this.scrollbarHelper = scrollbarHelper;\n        this.activate = new core_1.EventEmitter();\n        this.element = element.nativeElement;\n    }\n    Object.defineProperty(DataTableBodyRowComponent.prototype, \"columns\", {\n        get: function () {\n            return this._columns;\n        },\n        set: function (val) {\n            this._columns = val;\n            this.recalculateColumns(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataTableBodyRowComponent.prototype, \"innerWidth\", {\n        get: function () {\n            return this._innerWidth;\n        },\n        set: function (val) {\n            this._innerWidth = val;\n            this.recalculateColumns();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataTableBodyRowComponent.prototype, \"cssClass\", {\n        get: function () {\n            var cls = 'datatable-body-row';\n            if (this.isSelected)\n                cls += ' active';\n            if (this.row.$$index % 2 !== 0)\n                cls += ' datatable-row-odd';\n            if (this.row.$$index % 2 === 0)\n                cls += ' datatable-row-even';\n            if (this.rowClass) {\n                var res = this.rowClass(this.row);\n                if (typeof res === 'string') {\n                    cls += \" \" + res;\n                }\n                else if (typeof res === 'object') {\n                    var keys = Object.keys(res);\n                    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n                        var k = keys_1[_i];\n                        if (res[k] === true)\n                            cls += \" \" + k;\n                    }\n                }\n            }\n            return cls;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataTableBodyRowComponent.prototype, \"columnsTotalWidths\", {\n        get: function () {\n            return this.columnGroupWidths.total;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DataTableBodyRowComponent.prototype.trackByGroups = function (index, colGroup) {\n        return colGroup.type;\n    };\n    DataTableBodyRowComponent.prototype.columnTrackingFn = function (index, column) {\n        return column.$$id;\n    };\n    DataTableBodyRowComponent.prototype.stylesByGroup = function (group) {\n        var widths = this.columnGroupWidths;\n        var offsetX = this.offsetX;\n        var styles = {\n            width: widths[group] + \"px\"\n        };\n        if (group === 'left') {\n            utils_1.translateXY(styles, offsetX, 0);\n        }\n        else if (group === 'right') {\n            var bodyWidth = parseInt(this.innerWidth + '', 0);\n            var totalDiff = widths.total - bodyWidth;\n            var offsetDiff = totalDiff - offsetX;\n            var offset = (offsetDiff + this.scrollbarHelper.width) * -1;\n            utils_1.translateXY(styles, offset, 0);\n        }\n        return styles;\n    };\n    DataTableBodyRowComponent.prototype.onActivate = function (event, index) {\n        event.cellIndex = index;\n        event.rowElement = this.element;\n        this.activate.emit(event);\n    };\n    DataTableBodyRowComponent.prototype.onKeyDown = function (event) {\n        var keyCode = event.keyCode;\n        var isTargetRow = event.target === this.element;\n        var isAction = keyCode === utils_1.Keys.return ||\n            keyCode === utils_1.Keys.down ||\n            keyCode === utils_1.Keys.up ||\n            keyCode === utils_1.Keys.left ||\n            keyCode === utils_1.Keys.right;\n        if (isAction && isTargetRow) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.activate.emit({\n                type: 'keydown',\n                event: event,\n                row: this.row,\n                rowElement: this.element\n            });\n        }\n    };\n    DataTableBodyRowComponent.prototype.recalculateColumns = function (val) {\n        if (val === void 0) {\n            val = this.columns;\n        }\n        var colsByPin = utils_1.columnsByPin(val);\n        this.columnsByPin = utils_1.columnsByPinArr(val);\n        this.columnGroupWidths = utils_1.columnGroupWidths(colsByPin, val);\n    };\n    DataTableBodyRowComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'datatable-body-row',\n                    template: \"\\n    <div\\n      *ngFor=\\\"let colGroup of columnsByPin; let i = index; trackBy: trackByGroups\\\"\\n      class=\\\"datatable-row-{{colGroup.type}} datatable-row-group\\\"\\n      [ngStyle]=\\\"stylesByGroup(colGroup.type)\\\">\\n      <datatable-body-cell\\n        *ngFor=\\\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\\\"\\n        tabindex=\\\"-1\\\"\\n        [row]=\\\"row\\\"\\n        [isSelected]=\\\"isSelected\\\"\\n        [column]=\\\"column\\\"\\n        [rowHeight]=\\\"rowHeight\\\"\\n        (activate)=\\\"onActivate($event, ii)\\\">\\n      </datatable-body-cell>\\n    </div>\\n  \"\n                },] },\n    ];\n    DataTableBodyRowComponent.propDecorators = {\n        'columns': [{ type: core_1.Input },],\n        'innerWidth': [{ type: core_1.Input },],\n        'rowClass': [{ type: core_1.Input },],\n        'row': [{ type: core_1.Input },],\n        'offsetX': [{ type: core_1.Input },],\n        'isSelected': [{ type: core_1.Input },],\n        'cssClass': [{ type: core_1.HostBinding, args: ['class',] },],\n        'rowHeight': [{ type: core_1.HostBinding, args: ['style.height.px',] }, { type: core_1.Input },],\n        'columnsTotalWidths': [{ type: core_1.HostBinding, args: ['style.width.px',] },],\n        'activate': [{ type: core_1.Output },],\n        'onKeyDown': [{ type: core_1.HostListener, args: ['keydown', ['$event'],] },],\n    };\n    return DataTableBodyRowComponent;\n}());\nexports.DataTableBodyRowComponent = DataTableBodyRowComponent;\n",null]}