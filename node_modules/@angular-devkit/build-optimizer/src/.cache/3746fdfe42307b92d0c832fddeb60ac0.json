{"remainingRequest":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/angular-calendar/dist/esm/src/components/week/calendarWeekView.component.js","dependencies":[{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/angular-calendar/dist/esm/src/components/week/calendarWeekView.component.js","mtime":1494788451000},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/cache-loader/dist/cjs.js","mtime":1549951013815},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, Output, EventEmitter, ChangeDetectorRef, LOCALE_ID, Inject } from '@angular/core';\nimport addDays from 'date-fns/add_days';\nimport { CalendarDragHelper } from '../../providers/calendarDragHelper.provider';\nimport { CalendarResizeHelper } from '../../providers/calendarResizeHelper.provider';\nimport { CalendarUtils } from '../../providers/calendarUtils.provider';\n/**\n * Shows all events on a given week. Example usage:\n *\n * ```typescript\n * &lt;mwl-calendar-week-view\n *  [viewDate]=\"viewDate\"\n *  [events]=\"events\"&gt;\n * &lt;/mwl-calendar-week-view&gt;\n * ```\n */\nvar CalendarWeekViewComponent = /*@__PURE__*/ (function () {\n    /**\n     * @hidden\n     */\n    function CalendarWeekViewComponent(cdr, utils, locale) {\n        this.cdr = cdr;\n        this.utils = utils;\n        /**\n         * An array of events to display on view\n         */\n        this.events = [];\n        /**\n         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view\n         */\n        this.excludeDays = [];\n        /**\n         * The placement of the event tooltip\n         */\n        this.tooltipPlacement = 'bottom';\n        /**\n         * The precision to display events.\n         * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding\n         */\n        this.precision = 'days';\n        /**\n         * Called when a header week day is clicked\n         */\n        this.dayClicked = new EventEmitter();\n        /**\n         * Called when the event title is clicked\n         */\n        this.eventClicked = new EventEmitter();\n        /**\n         * Called when an event is resized or dragged and dropped\n         */\n        this.eventTimesChanged = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.eventRows = [];\n        this.locale = locale;\n    }\n    /**\n     * @hidden\n     */\n    CalendarWeekViewComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this.refresh) {\n            this.refreshSubscription = this.refresh.subscribe(function () {\n                _this.refreshAll();\n                _this.cdr.detectChanges();\n            });\n        }\n    };\n    /**\n     * @hidden\n     */\n    CalendarWeekViewComponent.prototype.ngOnChanges = function (changes) {\n        if (changes.viewDate || changes.excludeDays) {\n            this.refreshHeader();\n        }\n        if (changes.events || changes.viewDate || changes.excludeDays) {\n            this.refreshBody();\n        }\n    };\n    /**\n     * @hidden\n     */\n    CalendarWeekViewComponent.prototype.ngOnDestroy = function () {\n        if (this.refreshSubscription) {\n            this.refreshSubscription.unsubscribe();\n        }\n    };\n    /**\n     * @hidden\n     */\n    CalendarWeekViewComponent.prototype.resizeStarted = function (weekViewContainer, weekEvent, resizeEvent) {\n        this.currentResize = {\n            originalOffset: weekEvent.offset,\n            originalSpan: weekEvent.span,\n            edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'\n        };\n        var resizeHelper = new CalendarResizeHelper(weekViewContainer, this.getDayColumnWidth(weekViewContainer));\n        this.validateResize = function (_a) {\n            var rectangle = _a.rectangle;\n            return resizeHelper.validateResize({ rectangle: rectangle });\n        };\n        this.cdr.detectChanges();\n    };\n    /**\n     * @hidden\n     */\n    CalendarWeekViewComponent.prototype.resizing = function (weekEvent, resizeEvent, dayWidth) {\n        if (resizeEvent.edges.left) {\n            var diff = Math.round(+resizeEvent.edges.left / dayWidth);\n            weekEvent.offset = this.currentResize.originalOffset + diff;\n            weekEvent.span = this.currentResize.originalSpan - diff;\n        }\n        else if (resizeEvent.edges.right) {\n            var diff = Math.round(+resizeEvent.edges.right / dayWidth);\n            weekEvent.span = this.currentResize.originalSpan + diff;\n        }\n    };\n    /**\n     * @hidden\n     */\n    CalendarWeekViewComponent.prototype.resizeEnded = function (weekEvent) {\n        var daysDiff;\n        if (this.currentResize.edge === 'left') {\n            daysDiff = weekEvent.offset - this.currentResize.originalOffset;\n        }\n        else {\n            daysDiff = weekEvent.span - this.currentResize.originalSpan;\n        }\n        weekEvent.offset = this.currentResize.originalOffset;\n        weekEvent.span = this.currentResize.originalSpan;\n        var newStart = weekEvent.event.start;\n        var newEnd = weekEvent.event.end;\n        if (this.currentResize.edge === 'left') {\n            newStart = addDays(newStart, daysDiff);\n        }\n        else if (newEnd) {\n            newEnd = addDays(newEnd, daysDiff);\n        }\n        this.eventTimesChanged.emit({ newStart: newStart, newEnd: newEnd, event: weekEvent.event });\n        this.currentResize = null;\n    };\n    /**\n     * @hidden\n     */\n    CalendarWeekViewComponent.prototype.eventDragged = function (weekEvent, draggedByPx, dayWidth) {\n        var daysDragged = draggedByPx / dayWidth;\n        var newStart = addDays(weekEvent.event.start, daysDragged);\n        var newEnd;\n        if (weekEvent.event.end) {\n            newEnd = addDays(weekEvent.event.end, daysDragged);\n        }\n        this.eventTimesChanged.emit({ newStart: newStart, newEnd: newEnd, event: weekEvent.event });\n    };\n    /**\n     * @hidden\n     */\n    CalendarWeekViewComponent.prototype.getDayColumnWidth = function (eventRowContainer) {\n        return Math.floor(eventRowContainer.offsetWidth / this.days.length);\n    };\n    /**\n     * @hidden\n     */\n    CalendarWeekViewComponent.prototype.dragStart = function (weekViewContainer, event) {\n        var _this = this;\n        var dragHelper = new CalendarDragHelper(weekViewContainer, event);\n        this.validateDrag = function (_a) {\n            var x = _a.x, y = _a.y;\n            return !_this.currentResize && dragHelper.validateDrag({ x: x, y: y });\n        };\n        this.cdr.detectChanges();\n    };\n    CalendarWeekViewComponent.prototype.refreshHeader = function () {\n        this.days = this.utils.getWeekViewHeader({\n            viewDate: this.viewDate,\n            weekStartsOn: this.weekStartsOn,\n            excluded: this.excludeDays\n        });\n    };\n    CalendarWeekViewComponent.prototype.refreshBody = function () {\n        this.eventRows = this.utils.getWeekView({\n            events: this.events,\n            viewDate: this.viewDate,\n            weekStartsOn: this.weekStartsOn,\n            excluded: this.excludeDays,\n            precision: this.precision\n        });\n    };\n    CalendarWeekViewComponent.prototype.refreshAll = function () {\n        this.refreshHeader();\n        this.refreshBody();\n    };\n    return CalendarWeekViewComponent;\n}());\nexport { CalendarWeekViewComponent };\n//# sourceMappingURL=calendarWeekView.component.js.map \n",null]}