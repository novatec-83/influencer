{"remainingRequest":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/angular-draggable-droppable/dist/esm/src/droppable.directive.js","dependencies":[{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/angular-draggable-droppable/dist/esm/src/droppable.directive.js","mtime":1508582319000},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/cache-loader/dist/cjs.js","mtime":1549951013815},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, ElementRef, Output, EventEmitter, NgZone } from '@angular/core';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/pairwise';\nimport 'rxjs/add/operator/filter';\nimport { DraggableHelper } from './draggable-helper.provider';\nfunction isCoordinateWithinRectangle(clientX, clientY, rect) {\n    return (clientX >= rect.left &&\n        clientX <= rect.right &&\n        clientY >= rect.top &&\n        clientY <= rect.bottom);\n}\nvar DroppableDirective = /*@__PURE__*/ (function () {\n    function DroppableDirective(element, draggableHelper, zone) {\n        this.element = element;\n        this.draggableHelper = draggableHelper;\n        this.zone = zone;\n        this.dragEnter = new EventEmitter();\n        this.dragLeave = new EventEmitter();\n        this.dragOver = new EventEmitter();\n        this.drop = new EventEmitter();\n    }\n    DroppableDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this.currentDragSubscription = this.draggableHelper.currentDrag.subscribe(function (drag) {\n            var droppableRectangle = _this.element.nativeElement.getBoundingClientRect();\n            var currentDragDropData;\n            var overlaps = drag.map(function (_a) {\n                var clientX = _a.clientX, clientY = _a.clientY, dropData = _a.dropData;\n                currentDragDropData = dropData;\n                return isCoordinateWithinRectangle(clientX, clientY, droppableRectangle);\n            });\n            var overlapsChanged = overlaps.distinctUntilChanged();\n            var dragOverActive; // TODO - see if there's a way of doing this via rxjs\n            overlapsChanged.filter(function (overlapsNow) { return overlapsNow; }).subscribe(function () {\n                dragOverActive = true;\n                _this.zone.run(function () {\n                    _this.dragEnter.next({\n                        dropData: currentDragDropData\n                    });\n                });\n            });\n            overlaps.filter(function (overlapsNow) { return overlapsNow; }).subscribe(function () {\n                _this.zone.run(function () {\n                    _this.dragOver.next({\n                        dropData: currentDragDropData\n                    });\n                });\n            });\n            overlapsChanged\n                .pairwise()\n                .filter(function (_a) {\n                var didOverlap = _a[0], overlapsNow = _a[1];\n                return didOverlap && !overlapsNow;\n            })\n                .subscribe(function () {\n                dragOverActive = false;\n                _this.zone.run(function () {\n                    _this.dragLeave.next({\n                        dropData: currentDragDropData\n                    });\n                });\n            });\n            drag.flatMap(function () { return overlaps; }).subscribe({\n                complete: function () {\n                    if (dragOverActive) {\n                        _this.zone.run(function () {\n                            _this.drop.next({\n                                dropData: currentDragDropData\n                            });\n                        });\n                    }\n                }\n            });\n        });\n    };\n    DroppableDirective.prototype.ngOnDestroy = function () {\n        this.currentDragSubscription.unsubscribe();\n    };\n    return DroppableDirective;\n}());\nexport { DroppableDirective };\n//# sourceMappingURL=droppable.directive.js.map \n",null]}