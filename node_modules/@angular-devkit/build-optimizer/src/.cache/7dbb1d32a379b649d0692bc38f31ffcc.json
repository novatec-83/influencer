{"remainingRequest":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@swimlane/ngx-charts/release/common/axes/y-axis.component.js","dependencies":[{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@swimlane/ngx-charts/release/common/axes/y-axis.component.js","mtime":1495471598000},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/cache-loader/dist/cjs.js","mtime":1549951013815},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy } from '@angular/core';\nimport { YAxisTicksComponent } from './y-axis-ticks.component';\nvar YAxisComponent = /*@__PURE__*/ (function () {\n    function YAxisComponent() {\n        this.showGridLines = false;\n        this.yOrient = 'left';\n        this.dimensionsChanged = new EventEmitter();\n        this.yAxisClassName = 'y axis';\n        this.yAxisOffset = -5;\n        this.labelOffset = 80;\n        this.fill = 'none';\n        this.stroke = '#CCC';\n        this.tickStroke = '#CCC';\n        this.strokeWidth = 1;\n    }\n    YAxisComponent.prototype.ngOnChanges = function (changes) {\n        this.update();\n    };\n    YAxisComponent.prototype.update = function () {\n        this.offset = this.yAxisOffset;\n        if (this.yOrient === 'right') {\n            this.transform = \"translate(\" + (this.offset + this.dims.width) + \" , 0)\";\n        }\n        else {\n            this.transform = \"translate(\" + this.offset + \" , 0)\";\n        }\n        if (this.yAxisTickCount !== undefined) {\n            this.tickArguments = [this.yAxisTickCount];\n        }\n    };\n    YAxisComponent.prototype.emitTicksWidth = function (_a) {\n        var _this = this;\n        var width = _a.width;\n        if (width !== this.labelOffset) {\n            this.labelOffset = width;\n            setTimeout(function () {\n                _this.dimensionsChanged.emit({ width: width });\n            }, 0);\n        }\n    };\n    return YAxisComponent;\n}());\nexport { YAxisComponent };\n//# sourceMappingURL=y-axis.component.js.map \n",null]}