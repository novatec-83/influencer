{"remainingRequest":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/angular-draggable-droppable/dist/esm/src/draggable.directive.js","dependencies":[{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/angular-draggable-droppable/dist/esm/src/draggable.directive.js","mtime":1508582319000},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/cache-loader/dist/cjs.js","mtime":1549951013815},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Directive, ElementRef, Renderer2, Output, EventEmitter, Input, NgZone } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/merge';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/takeUntil';\nimport 'rxjs/add/operator/take';\nimport 'rxjs/add/operator/takeLast';\nimport 'rxjs/add/operator/pairwise';\nimport 'rxjs/add/operator/share';\nimport { DraggableHelper } from './draggable-helper.provider';\nvar MOVE_CURSOR = 'move';\nvar DraggableDirective = /*@__PURE__*/ (function () {\n    /**\n     * @hidden\n     */\n    function DraggableDirective(element, renderer, draggableHelper, zone) {\n        this.element = element;\n        this.renderer = renderer;\n        this.draggableHelper = draggableHelper;\n        this.zone = zone;\n        this.dragAxis = { x: true, y: true };\n        this.dragSnapGrid = {};\n        this.ghostDragEnabled = true;\n        this.dragCursor = MOVE_CURSOR;\n        this.dragStart = new EventEmitter();\n        this.dragging = new EventEmitter();\n        this.dragEnd = new EventEmitter();\n        /**\n         * @hidden\n         */\n        this.pointerDown = new Subject();\n        /**\n         * @hidden\n         */\n        this.pointerMove = new Subject();\n        /**\n         * @hidden\n         */\n        this.pointerUp = new Subject();\n        this.eventListenerSubscriptions = {};\n    }\n    DraggableDirective.prototype.ngOnInit = function () {\n        var _this = this;\n        this.checkEventListeners();\n        var pointerDrag = this.pointerDown\n            .filter(function () { return _this.canDrag(); })\n            .flatMap(function (pointerDownEvent) {\n            pointerDownEvent.event.preventDefault();\n            _this.zone.run(function () {\n                _this.dragStart.next({ x: 0, y: 0 });\n            });\n            _this.setCursor(_this.dragCursor);\n            var currentDrag = new Subject();\n            _this.draggableHelper.currentDrag.next(currentDrag);\n            var pointerMove = _this.pointerMove\n                .map(function (pointerMoveEvent) {\n                pointerMoveEvent.event.preventDefault();\n                return {\n                    currentDrag: currentDrag,\n                    x: pointerMoveEvent.clientX - pointerDownEvent.clientX,\n                    y: pointerMoveEvent.clientY - pointerDownEvent.clientY,\n                    clientX: pointerMoveEvent.clientX,\n                    clientY: pointerMoveEvent.clientY\n                };\n            })\n                .map(function (moveData) {\n                if (_this.dragSnapGrid.x) {\n                    moveData.x =\n                        Math.floor(moveData.x / _this.dragSnapGrid.x) *\n                            _this.dragSnapGrid.x;\n                }\n                if (_this.dragSnapGrid.y) {\n                    moveData.y =\n                        Math.floor(moveData.y / _this.dragSnapGrid.y) *\n                            _this.dragSnapGrid.y;\n                }\n                return moveData;\n            })\n                .map(function (moveData) {\n                if (!_this.dragAxis.x) {\n                    moveData.x = 0;\n                }\n                if (!_this.dragAxis.y) {\n                    moveData.y = 0;\n                }\n                return moveData;\n            })\n                .filter(function (_a) {\n                var x = _a.x, y = _a.y;\n                return !_this.validateDrag || _this.validateDrag({ x: x, y: y });\n            })\n                .takeUntil(Observable.merge(_this.pointerUp, _this.pointerDown));\n            pointerMove.takeLast(1).subscribe(function (_a) {\n                var x = _a.x, y = _a.y;\n                _this.zone.run(function () {\n                    _this.dragEnd.next({ x: x, y: y });\n                });\n                currentDrag.complete();\n                _this.setCssTransform(null);\n                if (_this.ghostDragEnabled) {\n                    _this.renderer.setStyle(_this.element.nativeElement, 'pointerEvents', null);\n                }\n            });\n            _this.pointerMove.next(pointerDownEvent);\n            return pointerMove;\n        })\n            .share();\n        Observable.merge(pointerDrag.take(1).map(function (value) { return [, value]; }), pointerDrag.pairwise())\n            .filter(function (_a) {\n            var previous = _a[0], next = _a[1];\n            if (!previous) {\n                return true;\n            }\n            return previous.x !== next.x || previous.y !== next.y;\n        })\n            .map(function (_a) {\n            var previous = _a[0], next = _a[1];\n            return next;\n        })\n            .subscribe(function (_a) {\n            var x = _a.x, y = _a.y, currentDrag = _a.currentDrag, clientX = _a.clientX, clientY = _a.clientY;\n            _this.zone.run(function () {\n                _this.dragging.next({ x: x, y: y });\n            });\n            if (_this.ghostDragEnabled) {\n                _this.renderer.setStyle(_this.element.nativeElement, 'pointerEvents', 'none');\n            }\n            _this.setCssTransform(\"translate(\" + x + \"px, \" + y + \"px)\");\n            currentDrag.next({\n                clientX: clientX,\n                clientY: clientY,\n                dropData: _this.dropData\n            });\n        });\n    };\n    DraggableDirective.prototype.ngOnChanges = function (changes) {\n        if (changes['dragAxis']) {\n            this.checkEventListeners();\n        }\n    };\n    DraggableDirective.prototype.ngOnDestroy = function () {\n        this.unsubscribeEventListeners();\n        this.pointerDown.complete();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    };\n    DraggableDirective.prototype.checkEventListeners = function () {\n        var _this = this;\n        var canDrag = this.canDrag();\n        var hasEventListeners = Object.keys(this.eventListenerSubscriptions).length > 0;\n        if (canDrag && !hasEventListeners) {\n            this.zone.runOutsideAngular(function () {\n                _this.eventListenerSubscriptions.mousedown = _this.renderer.listen(_this.element.nativeElement, 'mousedown', function (event) {\n                    _this.onMouseDown(event);\n                });\n                _this.eventListenerSubscriptions.mouseup = _this.renderer.listen('document', 'mouseup', function (event) {\n                    _this.onMouseUp(event);\n                });\n                _this.eventListenerSubscriptions.touchstart = _this.renderer.listen(_this.element.nativeElement, 'touchstart', function (event) {\n                    _this.onTouchStart(event);\n                });\n                _this.eventListenerSubscriptions.touchend = _this.renderer.listen('document', 'touchend', function (event) {\n                    _this.onTouchEnd(event);\n                });\n                _this.eventListenerSubscriptions.touchcancel = _this.renderer.listen('document', 'touchcancel', function (event) {\n                    _this.onTouchEnd(event);\n                });\n                _this.eventListenerSubscriptions.mouseenter = _this.renderer.listen(_this.element.nativeElement, 'mouseenter', function () {\n                    _this.onMouseEnter();\n                });\n                _this.eventListenerSubscriptions.mouseleave = _this.renderer.listen(_this.element.nativeElement, 'mouseleave', function () {\n                    _this.onMouseLeave();\n                });\n            });\n        }\n        else if (!canDrag && hasEventListeners) {\n            this.unsubscribeEventListeners();\n        }\n    };\n    DraggableDirective.prototype.onMouseDown = function (event) {\n        var _this = this;\n        if (!this.eventListenerSubscriptions.mousemove) {\n            this.eventListenerSubscriptions.mousemove = this.renderer.listen('document', 'mousemove', function (mouseMoveEvent) {\n                _this.pointerMove.next({\n                    event: mouseMoveEvent,\n                    clientX: mouseMoveEvent.clientX,\n                    clientY: mouseMoveEvent.clientY\n                });\n            });\n        }\n        this.pointerDown.next({\n            event: event,\n            clientX: event.clientX,\n            clientY: event.clientY\n        });\n    };\n    DraggableDirective.prototype.onMouseUp = function (event) {\n        if (this.eventListenerSubscriptions.mousemove) {\n            this.eventListenerSubscriptions.mousemove();\n            delete this.eventListenerSubscriptions.mousemove;\n        }\n        this.pointerUp.next({\n            event: event,\n            clientX: event.clientX,\n            clientY: event.clientY\n        });\n    };\n    DraggableDirective.prototype.onTouchStart = function (event) {\n        var _this = this;\n        if (!this.eventListenerSubscriptions.touchmove) {\n            this.eventListenerSubscriptions.touchmove = this.renderer.listen('document', 'touchmove', function (touchMoveEvent) {\n                _this.pointerMove.next({\n                    event: touchMoveEvent,\n                    clientX: touchMoveEvent.targetTouches[0].clientX,\n                    clientY: touchMoveEvent.targetTouches[0].clientY\n                });\n            });\n        }\n        this.pointerDown.next({\n            event: event,\n            clientX: event.touches[0].clientX,\n            clientY: event.touches[0].clientY\n        });\n    };\n    DraggableDirective.prototype.onTouchEnd = function (event) {\n        if (this.eventListenerSubscriptions.touchmove) {\n            this.eventListenerSubscriptions.touchmove();\n            delete this.eventListenerSubscriptions.touchmove;\n        }\n        this.pointerUp.next({\n            event: event,\n            clientX: event.changedTouches[0].clientX,\n            clientY: event.changedTouches[0].clientY\n        });\n    };\n    DraggableDirective.prototype.onMouseEnter = function () {\n        this.setCursor(this.dragCursor);\n    };\n    DraggableDirective.prototype.onMouseLeave = function () {\n        this.setCursor(null);\n    };\n    DraggableDirective.prototype.setCssTransform = function (value) {\n        if (this.ghostDragEnabled) {\n            this.renderer.setStyle(this.element.nativeElement, 'transform', value);\n            this.renderer.setStyle(this.element.nativeElement, '-webkit-transform', value);\n            this.renderer.setStyle(this.element.nativeElement, '-ms-transform', value);\n            this.renderer.setStyle(this.element.nativeElement, '-moz-transform', value);\n            this.renderer.setStyle(this.element.nativeElement, '-o-transform', value);\n        }\n    };\n    DraggableDirective.prototype.canDrag = function () {\n        return this.dragAxis.x || this.dragAxis.y;\n    };\n    DraggableDirective.prototype.setCursor = function (value) {\n        this.renderer.setStyle(this.element.nativeElement, 'cursor', value);\n    };\n    DraggableDirective.prototype.unsubscribeEventListeners = function () {\n        var _this = this;\n        Object.keys(this.eventListenerSubscriptions).forEach(function (type) {\n            _this.eventListenerSubscriptions[type]();\n            delete _this.eventListenerSubscriptions[type];\n        });\n    };\n    return DraggableDirective;\n}());\nexport { DraggableDirective };\n//# sourceMappingURL=draggable.directive.js.map \n",null]}