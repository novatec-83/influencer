{"remainingRequest":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@swimlane/ngx-datatable/release/directives/long-press.directive.js","dependencies":[{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@swimlane/ngx-datatable/release/directives/long-press.directive.js","mtime":1499611568000},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/cache-loader/dist/cjs.js","mtime":1549951013815},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar Observable_1 = require(\"rxjs/Observable\");\nrequire(\"rxjs/add/operator/takeUntil\");\nvar LongPressDirective = /*@__PURE__*/ (function () {\n    function LongPressDirective() {\n        this.pressEnabled = true;\n        this.duration = 500;\n        this.longPressStart = new core_1.EventEmitter();\n        this.longPressing = new core_1.EventEmitter();\n        this.longPressEnd = new core_1.EventEmitter();\n        this.mouseX = 0;\n        this.mouseY = 0;\n    }\n    Object.defineProperty(LongPressDirective.prototype, \"press\", {\n        get: function () { return this.pressing; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LongPressDirective.prototype, \"isLongPress\", {\n        get: function () {\n            return this.isLongPressing;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LongPressDirective.prototype.onMouseDown = function (event) {\n        var _this = this;\n        // don't do right/middle clicks\n        if (event.which !== 1 || !this.pressEnabled)\n            return;\n        // don't start drag if its on resize handle\n        var target = event.target;\n        if (target.classList.contains('resize-handle'))\n            return;\n        this.mouseX = event.clientX;\n        this.mouseY = event.clientY;\n        this.pressing = true;\n        this.isLongPressing = false;\n        var mouseup = Observable_1.Observable.fromEvent(document, 'mouseup');\n        this.subscription = mouseup.subscribe(function (ev) { return _this.onMouseup(); });\n        this.timeout = setTimeout(function () {\n            _this.isLongPressing = true;\n            _this.longPressStart.emit({\n                event: event,\n                model: _this.pressModel\n            });\n            _this.subscription.add(Observable_1.Observable.fromEvent(document, 'mousemove')\n                .takeUntil(mouseup)\n                .subscribe(function (mouseEvent) { return _this.onMouseMove(mouseEvent); }));\n            _this.loop(event);\n        }, this.duration);\n        this.loop(event);\n    };\n    LongPressDirective.prototype.onMouseMove = function (event) {\n        if (this.pressing && !this.isLongPressing) {\n            var xThres = Math.abs(event.clientX - this.mouseX) > 10;\n            var yThres = Math.abs(event.clientY - this.mouseY) > 10;\n            if (xThres || yThres) {\n                this.endPress();\n            }\n        }\n    };\n    LongPressDirective.prototype.loop = function (event) {\n        var _this = this;\n        if (this.isLongPressing) {\n            this.timeout = setTimeout(function () {\n                _this.longPressing.emit({\n                    event: event,\n                    model: _this.pressModel\n                });\n                _this.loop(event);\n            }, 50);\n        }\n    };\n    LongPressDirective.prototype.endPress = function () {\n        clearTimeout(this.timeout);\n        this.isLongPressing = false;\n        this.pressing = false;\n        this._destroySubscription();\n        this.longPressEnd.emit({\n            model: this.pressModel\n        });\n    };\n    LongPressDirective.prototype.onMouseup = function () {\n        this.endPress();\n    };\n    LongPressDirective.prototype.ngOnDestroy = function () {\n        this._destroySubscription();\n    };\n    LongPressDirective.prototype._destroySubscription = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    };\n    LongPressDirective.decorators = [\n        { type: core_1.Directive, args: [{ selector: '[long-press]' },] },\n    ];\n    LongPressDirective.propDecorators = {\n        'pressEnabled': [{ type: core_1.Input },],\n        'pressModel': [{ type: core_1.Input },],\n        'duration': [{ type: core_1.Input },],\n        'longPressStart': [{ type: core_1.Output },],\n        'longPressing': [{ type: core_1.Output },],\n        'longPressEnd': [{ type: core_1.Output },],\n        'press': [{ type: core_1.HostBinding, args: ['class.press',] },],\n        'isLongPress': [{ type: core_1.HostBinding, args: ['class.longpress',] },],\n        'onMouseDown': [{ type: core_1.HostListener, args: ['mousedown', ['$event'],] },],\n    };\n    return LongPressDirective;\n}());\nexports.LongPressDirective = LongPressDirective;\n",null]}