{"remainingRequest":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@swimlane/ngx-datatable/release/components/datatable.component.js","dependencies":[{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@swimlane/ngx-datatable/release/components/datatable.component.js","mtime":1499611568000},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/cache-loader/dist/cjs.js","mtime":1549951013815},{"path":"/home/amjad/Downloads/influexai_Influencer_12_feb/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar utils_1 = require(\"../utils\");\nvar services_1 = require(\"../services\");\nvar types_1 = require(\"../types\");\nvar body_1 = require(\"./body\");\nvar columns_1 = require(\"./columns\");\nvar row_detail_1 = require(\"./row-detail\");\nvar footer_1 = require(\"./footer\");\nvar DatatableComponent = /*@__PURE__*/ (function () {\n    function DatatableComponent(scrollbarHelper, element, differs) {\n        this.scrollbarHelper = scrollbarHelper;\n        /**\n         * List of row objects that should be\n         * represented as selected in the grid.\n         * Default value: `[]`\n         *\n         * @type {any[]}\n         * @memberOf DatatableComponent\n         */\n        this.selected = [];\n        /**\n         * Enable vertical scrollbars\n         *\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        this.scrollbarV = false;\n        /**\n         * Enable horz scrollbars\n         *\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        this.scrollbarH = false;\n        /**\n         * The row height; which is necessary\n         * to calculate the height for the lazy rendering.\n         *\n         * @type {number}\n         * @memberOf DatatableComponent\n         */\n        this.rowHeight = 30;\n        /**\n         * Type of column width distribution formula.\n         * Example: flex, force, standard\n         *\n         * @type {ColumnMode}\n         * @memberOf DatatableComponent\n         */\n        this.columnMode = types_1.ColumnMode.standard;\n        /**\n         * The minimum header height in pixels.\n         * Pass a falsey for no header\n         *\n         * @type {*}\n         * @memberOf DatatableComponent\n         */\n        this.headerHeight = 30;\n        /**\n         * The minimum footer height in pixels.\n         * Pass falsey for no footer\n         *\n         * @type {number}\n         * @memberOf DatatableComponent\n         */\n        this.footerHeight = 0;\n        /**\n         * If the table should use external paging\n         * otherwise its assumed that all data is preloaded.\n         *\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        this.externalPaging = false;\n        /**\n         * If the table should use external sorting or\n         * the built-in basic sorting.\n         *\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        this.externalSorting = false;\n        /**\n         * The page size to be shown.\n         * Default value: `undefined`\n         *\n         * @type {number}\n         * @memberOf DatatableComponent\n         */\n        this.limit = undefined;\n        /**\n         * The current offset ( page - 1 ) shown.\n         * Default value: `0`\n         *\n         * @type {number}\n         * @memberOf DatatableComponent\n         */\n        this.offset = 0;\n        /**\n         * Show the linear loading bar.\n         * Default value: `false`\n         *\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        this.loadingIndicator = false;\n        /**\n         * Enable/Disable ability to re-order columns\n         * by dragging them.\n         *\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        this.reorderable = true;\n        /**\n         * The type of sorting\n         *\n         * @type {SortType}\n         * @memberOf DatatableComponent\n         */\n        this.sortType = types_1.SortType.single;\n        /**\n         * Array of sorted columns by property and type.\n         * Default value: `[]`\n         *\n         * @type {any[]}\n         * @memberOf DatatableComponent\n         */\n        this.sorts = [];\n        /**\n         * Css class overrides\n         *\n         * @type {*}\n         * @memberOf DatatableComponent\n         */\n        this.cssClasses = {\n            sortAscending: 'datatable-icon-up',\n            sortDescending: 'datatable-icon-down',\n            pagerLeftArrow: 'datatable-icon-left',\n            pagerRightArrow: 'datatable-icon-right',\n            pagerPrevious: 'datatable-icon-prev',\n            pagerNext: 'datatable-icon-skip'\n        };\n        /**\n         * Message overrides for localization\n         *\n         * emptyMessage     [default] = 'No data to display'\n         * totalMessage     [default] = 'total'\n         * selectedMessage  [default] = 'selected'\n         *\n         * @type {*}\n         * @memberOf DatatableComponent\n         */\n        this.messages = {\n            // Message to show when array is presented\n            // but contains no values\n            emptyMessage: 'No data to display',\n            // Footer total message\n            totalMessage: 'total',\n            // Footer selected message\n            selectedMessage: 'selected'\n        };\n        /**\n         * This will be used when displaying or selecting rows.\n         * when tracking/comparing them, we'll use the value of this fn,\n         *\n         * (`fn(x) === fn(y)` instead of `x === y`)\n         *\n         * @memberOf DatatableComponent\n         */\n        this.rowIdentity = (function (x) { return x; });\n        /**\n         * Body was scrolled typically in a `scrollbarV:true` scenario.\n         *\n         * @type {EventEmitter<any>}\n         * @memberOf DatatableComponent\n         */\n        this.scroll = new core_1.EventEmitter();\n        /**\n         * A cell or row was focused via keyboard or mouse click.\n         *\n         * @type {EventEmitter<any>}\n         * @memberOf DatatableComponent\n         */\n        this.activate = new core_1.EventEmitter();\n        /**\n         * A cell or row was selected.\n         *\n         * @type {EventEmitter<any>}\n         * @memberOf DatatableComponent\n         */\n        this.select = new core_1.EventEmitter();\n        /**\n         * Column sort was invoked.\n         *\n         * @type {EventEmitter<any>}\n         * @memberOf DatatableComponent\n         */\n        this.sort = new core_1.EventEmitter();\n        /**\n         * The table was paged either triggered by the pager or the body scroll.\n         *\n         * @type {EventEmitter<any>}\n         * @memberOf DatatableComponent\n         */\n        this.page = new core_1.EventEmitter();\n        /**\n         * Columns were re-ordered.\n         *\n         * @type {EventEmitter<any>}\n         * @memberOf DatatableComponent\n         */\n        this.reorder = new core_1.EventEmitter();\n        /**\n         * Column was resized.\n         *\n         * @type {EventEmitter<any>}\n         * @memberOf DatatableComponent\n         */\n        this.resize = new core_1.EventEmitter();\n        /**\n         * The context menu was invoked on the table.\n         * type indicates whether the header or the body was clicked.\n         * content contains either the column or the row that was clicked.\n         *\n         * @memberOf DatatableComponent\n         */\n        this.tableContextmenu = new core_1.EventEmitter(false);\n        this.rowCount = 0;\n        this.offsetX = 0;\n        this._count = 0;\n        // get ref to elm for measuring\n        this.element = element.nativeElement;\n        this.rowDiffer = differs.find({}).create(null);\n    }\n    Object.defineProperty(DatatableComponent.prototype, \"rows\", {\n        /**\n         * Gets the rows.\n         *\n         * @readonly\n         * @type {*}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            return this._rows;\n        },\n        /**\n         * Rows that are displayed in the table.\n         *\n         * @memberOf DatatableComponent\n         */\n        set: function (val) {\n            // auto sort on new updates\n            if (!this.externalSorting) {\n                val = utils_1.sortRows(val, this.columns, this.sorts);\n            }\n            this._rows = val;\n            // recalculate sizes/etc\n            this.recalculate();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"columns\", {\n        /**\n         * Get the columns.\n         *\n         * @readonly\n         * @type {any[]}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            return this._columns;\n        },\n        /**\n         * Columns to be displayed.\n         *\n         * @memberOf DatatableComponent\n         */\n        set: function (val) {\n            if (val) {\n                utils_1.setColumnDefaults(val);\n                this.recalculateColumns(val);\n            }\n            this._columns = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"count\", {\n        /**\n         * Gets the count.\n         *\n         * @readonly\n         * @type {number}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            return this._count;\n        },\n        /**\n         * The total count of all rows.\n         * Default value: `0`\n         *\n         * @type {number}\n         * @memberOf DatatableComponent\n         */\n        set: function (val) {\n            this._count = val;\n            // recalculate sizes/etc\n            this.recalculate();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isFixedHeader\", {\n        /**\n         * CSS class applied if the header height if fixed height.\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            var headerHeight = this.headerHeight;\n            return (typeof headerHeight === 'string') ?\n                headerHeight !== 'auto' : true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isFixedRow\", {\n        /**\n         * CSS class applied to the root element if\n         * the row heights are fixed heights.\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            var rowHeight = this.rowHeight;\n            return (typeof rowHeight === 'string') ?\n                rowHeight !== 'auto' : true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isVertScroll\", {\n        /**\n         * CSS class applied to root element if\n         * vertical scrolling is enabled.\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            return this.scrollbarV;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isHorScroll\", {\n        /**\n         * CSS class applied to the root element\n         * if the horziontal scrolling is enabled.\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            return this.scrollbarH;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isSelectable\", {\n        /**\n         * CSS class applied to root element is selectable.\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            return this.selectionType !== undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isCheckboxSelection\", {\n        /**\n         * CSS class applied to root is checkbox selection.\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            return this.selectionType === types_1.SelectionType.checkbox;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isCellSelection\", {\n        /**\n         * CSS class applied to root if cell selection.\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            return this.selectionType === types_1.SelectionType.cell;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isSingleSelection\", {\n        /**\n         * CSS class applied to root if single select.\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            return this.selectionType === types_1.SelectionType.single;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isMultiSelection\", {\n        /**\n         * CSS class added to root element if mulit select\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            return this.selectionType === types_1.SelectionType.multi;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isMultiClickSelection\", {\n        /**\n         * CSS class added to root element if mulit click select\n         *\n         * @readonly\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            return this.selectionType === types_1.SelectionType.multiClick;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"columnTemplates\", {\n        /**\n         * Returns the column templates.\n         *\n         * @readonly\n         * @type {QueryList<DataTableColumnDirective>}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            return this._columnTemplates;\n        },\n        /**\n         * Column templates gathered from `ContentChildren`\n         * if described in your markup.\n         *\n         * @memberOf DatatableComponent\n         */\n        set: function (val) {\n            this._columnTemplates = val;\n            if (val) {\n                // only set this if results were brought back\n                var arr = val.toArray();\n                if (arr.length) {\n                    // translate them to normal objects\n                    this.columns = utils_1.translateTemplates(arr);\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"allRowsSelected\", {\n        /**\n         * Returns if all rows are selected.\n         *\n         * @readonly\n         * @private\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        get: function () {\n            return this.selected &&\n                this.rows &&\n                this.rows.length !== 0 &&\n                this.selected.length === this.rows.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Lifecycle hook that is called after data-bound\n     * properties of a directive are initialized.\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.ngOnInit = function () {\n        // need to call this immediatly to size\n        // if the table is hidden the visibility\n        // listener will invoke this itself upon show\n        this.recalculate();\n    };\n    /**\n     * Lifecycle hook that is called after a component's\n     * view has been fully initialized.\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (!this.externalSorting) {\n            var val = utils_1.sortRows(this._rows, this.columns, this.sorts);\n            this._rows = val;\n        }\n        // this has to be done to prevent the change detection\n        // tree from freaking out because we are readjusting\n        setTimeout(function () {\n            _this.recalculate();\n            // emit page for virtual server-side kickoff\n            if (_this.externalPaging && _this.scrollbarV) {\n                _this.page.emit({\n                    count: _this.count,\n                    pageSize: _this.pageSize,\n                    limit: _this.limit,\n                    offset: 0\n                });\n            }\n        });\n    };\n    /**\n     * Lifecycle hook that is called when Angular dirty checks a directive.\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.ngDoCheck = function () {\n        if (this.rowDiffer.diff(this.rows)) {\n            this.recalculatePages();\n        }\n    };\n    /**\n     * Recalc's the sizes of the grid.\n     *\n     * Updated automatically on changes to:\n     *\n     *  - Columns\n     *  - Rows\n     *  - Paging related\n     *\n     * Also can be manually invoked or upon window resize.\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.recalculate = function () {\n        this.recalculateDims();\n        this.recalculateColumns();\n    };\n    /**\n     * Window resize handler to update sizes.\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.onWindowResize = function () {\n        this.recalculate();\n    };\n    /**\n     * Recalulcates the column widths based on column width\n     * distribution mode and scrollbar offsets.\n     *\n     * @param {any[]} [columns=this.columns]\n     * @param {number} [forceIdx=-1]\n     * @param {boolean} [allowBleed=this.scrollH]\n     * @returns {any[]}\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.recalculateColumns = function (columns, forceIdx, allowBleed) {\n        if (columns === void 0) {\n            columns = this.columns;\n        }\n        if (forceIdx === void 0) {\n            forceIdx = -1;\n        }\n        if (allowBleed === void 0) {\n            allowBleed = this.scrollbarH;\n        }\n        if (!columns)\n            return;\n        var width = this.innerWidth;\n        if (this.scrollbarV) {\n            width = width - this.scrollbarHelper.width;\n        }\n        if (this.columnMode === types_1.ColumnMode.force) {\n            utils_1.forceFillColumnWidths(columns, width, forceIdx, allowBleed);\n        }\n        else if (this.columnMode === types_1.ColumnMode.flex) {\n            utils_1.adjustColumnWidths(columns, width);\n        }\n        return columns;\n    };\n    /**\n     * Recalculates the dimensions of the table size.\n     * Internally calls the page size and row count calcs too.\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.recalculateDims = function () {\n        var dims = this.element.getBoundingClientRect();\n        this.innerWidth = Math.floor(dims.width);\n        if (this.scrollbarV) {\n            var height = dims.height;\n            if (this.headerHeight)\n                height = height - this.headerHeight;\n            if (this.footerHeight)\n                height = height - this.footerHeight;\n            this.bodyHeight = height;\n        }\n        this.recalculatePages();\n    };\n    /**\n     * Recalculates the pages after a update.\n     *\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.recalculatePages = function () {\n        this.pageSize = this.calcPageSize();\n        this.rowCount = this.calcRowCount();\n    };\n    /**\n     * Body triggered a page event.\n     *\n     * @param {*} { offset }\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.onBodyPage = function (_a) {\n        var offset = _a.offset;\n        this.offset = offset;\n        this.page.emit({\n            count: this.count,\n            pageSize: this.pageSize,\n            limit: this.limit,\n            offset: this.offset\n        });\n    };\n    /**\n     * The body triggered a scroll event.\n     *\n     * @param {MouseEvent} event\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.onBodyScroll = function (event) {\n        this.offsetX = event.offsetX;\n        this.scroll.emit(event);\n    };\n    /**\n     * The footer triggered a page event.\n     *\n     * @param {*} event\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.onFooterPage = function (event) {\n        this.offset = event.page - 1;\n        this.bodyComponent.updateOffsetY(this.offset);\n        this.page.emit({\n            count: this.count,\n            pageSize: this.pageSize,\n            limit: this.limit,\n            offset: this.offset\n        });\n    };\n    /**\n     * Recalculates the sizes of the page\n     *\n     * @param {any[]} [val=this.rows]\n     * @returns {number}\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.calcPageSize = function (val) {\n        if (val === void 0) {\n            val = this.rows;\n        }\n        // Keep the page size constant even if the row has been expanded.\n        // This is because an expanded row is still considered to be a child of\n        // the original row.  Hence calculation would use rowHeight only.\n        if (this.scrollbarV) {\n            var size = Math.ceil(this.bodyHeight / this.rowHeight);\n            return Math.max(size, 0);\n        }\n        // if limit is passed, we are paging\n        if (this.limit !== undefined)\n            return this.limit;\n        // otherwise use row length\n        if (val)\n            return val.length;\n        // other empty :(\n        return 0;\n    };\n    /**\n     * Calculates the row count.\n     *\n     * @param {any[]} [val=this.rows]\n     * @returns {number}\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.calcRowCount = function (val) {\n        if (val === void 0) {\n            val = this.rows;\n        }\n        if (!this.externalPaging) {\n            if (!val)\n                return 0;\n            return val.length;\n        }\n        return this.count;\n    };\n    /**\n     * The header triggered a contextmenu event.\n     *\n     * @param {*} { event, column }\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.onColumnContextmenu = function (_a) {\n        var event = _a.event, column = _a.column;\n        this.tableContextmenu.emit({ event: event, type: types_1.ContextmenuType.header, content: column });\n    };\n    /**\n     * The body triggered a contextmenu event.\n     *\n     * @param {*} { event, row }\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.onRowContextmenu = function (_a) {\n        var event = _a.event, row = _a.row;\n        this.tableContextmenu.emit({ event: event, type: types_1.ContextmenuType.body, content: row });\n    };\n    /**\n     * The header triggered a column resize event.\n     *\n     * @param {*} { column, newValue }\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.onColumnResize = function (_a) {\n        var column = _a.column, newValue = _a.newValue;\n        /* Safari/iOS 10.2 workaround */\n        if (column === undefined) {\n            return;\n        }\n        var idx;\n        var cols = this.columns.map(function (c, i) {\n            c = __assign({}, c);\n            if (c.$$id === column.$$id) {\n                idx = i;\n                c.width = newValue;\n                // set this so we can force the column\n                // width distribution to be to this value\n                c.$$oldWidth = newValue;\n            }\n            return c;\n        });\n        this.recalculateColumns(cols, idx);\n        this._columns = cols;\n        this.resize.emit({\n            column: column,\n            newValue: newValue\n        });\n    };\n    /**\n     * The header triggered a column re-order event.\n     *\n     * @param {*} { column, newValue, prevValue }\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.onColumnReorder = function (_a) {\n        var column = _a.column, newValue = _a.newValue, prevValue = _a.prevValue;\n        var cols = this.columns.map(function (c) {\n            return __assign({}, c);\n        });\n        var prevCol = cols[newValue];\n        cols[newValue] = column;\n        cols[prevValue] = prevCol;\n        this.columns = cols;\n        this.reorder.emit({\n            column: column,\n            newValue: newValue,\n            prevValue: prevValue\n        });\n    };\n    /**\n     * The header triggered a column sort event.\n     *\n     * @param {*} event\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.onColumnSort = function (event) {\n        var sorts = event.sorts;\n        // this could be optimized better since it will resort\n        // the rows again on the 'push' detection...\n        if (this.externalSorting === false) {\n            // don't use normal setter so we don't resort\n            this._rows = utils_1.sortRows(this.rows, this.columns, sorts);\n        }\n        this.sorts = sorts;\n        // Always go to first page when sorting to see the newly sorted data\n        this.offset = 0;\n        this.bodyComponent.updateOffsetY(this.offset);\n        this.sort.emit(event);\n    };\n    /**\n     * Toggle all row selection\n     *\n     * @param {*} event\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.onHeaderSelect = function (event) {\n        // before we splice, chk if we currently have all selected\n        var allSelected = this.selected.length === this.rows.length;\n        // remove all existing either way\n        this.selected = [];\n        // do the opposite here\n        if (!allSelected) {\n            (_a = this.selected).push.apply(_a, this.rows);\n        }\n        this.select.emit({\n            selected: this.selected\n        });\n        var _a;\n    };\n    /**\n     * A row was selected from body\n     *\n     * @param {*} event\n     *\n     * @memberOf DatatableComponent\n     */\n    DatatableComponent.prototype.onBodySelect = function (event) {\n        this.select.emit(event);\n    };\n    DatatableComponent.decorators = [\n        { type: core_1.Component, args: [{\n                    selector: 'ngx-datatable',\n                    template: \"\\n    <div\\n      visibilityObserver\\n      (visible)=\\\"recalculate()\\\">\\n      <datatable-header\\n        *ngIf=\\\"headerHeight\\\"\\n        [sorts]=\\\"sorts\\\"\\n        [sortType]=\\\"sortType\\\"\\n        [scrollbarH]=\\\"scrollbarH\\\"\\n        [innerWidth]=\\\"innerWidth\\\"\\n        [offsetX]=\\\"offsetX\\\"\\n        [columns]=\\\"columns\\\"\\n        [headerHeight]=\\\"headerHeight\\\"\\n        [reorderable]=\\\"reorderable\\\"\\n        [sortAscendingIcon]=\\\"cssClasses.sortAscending\\\"\\n        [sortDescendingIcon]=\\\"cssClasses.sortDescending\\\"\\n        [allRowsSelected]=\\\"allRowsSelected\\\"\\n        [selectionType]=\\\"selectionType\\\"\\n        (sort)=\\\"onColumnSort($event)\\\"\\n        (resize)=\\\"onColumnResize($event)\\\"\\n        (reorder)=\\\"onColumnReorder($event)\\\"\\n        (select)=\\\"onHeaderSelect($event)\\\"\\n        (columnContextmenu)=\\\"onColumnContextmenu($event)\\\">\\n      </datatable-header>\\n      <datatable-body\\n        [rows]=\\\"rows\\\"\\n        [scrollbarV]=\\\"scrollbarV\\\"\\n        [scrollbarH]=\\\"scrollbarH\\\"\\n        [loadingIndicator]=\\\"loadingIndicator\\\"\\n        [externalPaging]=\\\"externalPaging\\\"\\n        [rowHeight]=\\\"rowHeight\\\"\\n        [rowCount]=\\\"rowCount\\\"\\n        [offset]=\\\"offset\\\"\\n        [trackByProp]=\\\"trackByProp\\\"\\n        [columns]=\\\"columns\\\"\\n        [pageSize]=\\\"pageSize\\\"\\n        [offsetX]=\\\"offsetX\\\"\\n        [rowDetail]=\\\"rowDetail\\\"\\n        [selected]=\\\"selected\\\"\\n        [innerWidth]=\\\"innerWidth\\\"\\n        [bodyHeight]=\\\"bodyHeight\\\"\\n        [selectionType]=\\\"selectionType\\\"\\n        [emptyMessage]=\\\"messages.emptyMessage\\\"\\n        [rowIdentity]=\\\"rowIdentity\\\"\\n        [rowClass]=\\\"rowClass\\\"\\n        [selectCheck]=\\\"selectCheck\\\"\\n        (page)=\\\"onBodyPage($event)\\\"\\n        (activate)=\\\"activate.emit($event)\\\"\\n        (rowContextmenu)=\\\"onRowContextmenu($event)\\\"\\n        (select)=\\\"onBodySelect($event)\\\"\\n        (scroll)=\\\"onBodyScroll($event)\\\">\\n      </datatable-body>\\n      <datatable-footer\\n        *ngIf=\\\"footerHeight\\\"\\n        [rowCount]=\\\"rowCount\\\"\\n        [pageSize]=\\\"pageSize\\\"\\n        [offset]=\\\"offset\\\"\\n        [footerHeight]=\\\"footerHeight\\\"\\n        [footerTemplate]=\\\"footer\\\"\\n        [totalMessage]=\\\"messages.totalMessage\\\"\\n        [pagerLeftArrowIcon]=\\\"cssClasses.pagerLeftArrow\\\"\\n        [pagerRightArrowIcon]=\\\"cssClasses.pagerRightArrow\\\"\\n        [pagerPreviousIcon]=\\\"cssClasses.pagerPrevious\\\"\\n        [selectedCount]=\\\"selected.length\\\"\\n        [selectedMessage]=\\\"!!selectionType && messages.selectedMessage\\\"\\n        [pagerNextIcon]=\\\"cssClasses.pagerNext\\\"\\n        (page)=\\\"onFooterPage($event)\\\">\\n      </datatable-footer>\\n    </div>\\n  \",\n                    encapsulation: core_1.ViewEncapsulation.None,\n                    styleUrls: ['./datatable.component.css'],\n                    host: {\n                        class: 'ngx-datatable'\n                    }\n                },] },\n    ];\n    DatatableComponent.propDecorators = {\n        'rows': [{ type: core_1.Input },],\n        'columns': [{ type: core_1.Input },],\n        'selected': [{ type: core_1.Input },],\n        'scrollbarV': [{ type: core_1.Input },],\n        'scrollbarH': [{ type: core_1.Input },],\n        'rowHeight': [{ type: core_1.Input },],\n        'columnMode': [{ type: core_1.Input },],\n        'headerHeight': [{ type: core_1.Input },],\n        'footerHeight': [{ type: core_1.Input },],\n        'externalPaging': [{ type: core_1.Input },],\n        'externalSorting': [{ type: core_1.Input },],\n        'limit': [{ type: core_1.Input },],\n        'count': [{ type: core_1.Input },],\n        'offset': [{ type: core_1.Input },],\n        'loadingIndicator': [{ type: core_1.Input },],\n        'selectionType': [{ type: core_1.Input },],\n        'reorderable': [{ type: core_1.Input },],\n        'sortType': [{ type: core_1.Input },],\n        'sorts': [{ type: core_1.Input },],\n        'cssClasses': [{ type: core_1.Input },],\n        'messages': [{ type: core_1.Input },],\n        'rowIdentity': [{ type: core_1.Input },],\n        'rowClass': [{ type: core_1.Input },],\n        'selectCheck': [{ type: core_1.Input },],\n        'trackByProp': [{ type: core_1.Input },],\n        'scroll': [{ type: core_1.Output },],\n        'activate': [{ type: core_1.Output },],\n        'select': [{ type: core_1.Output },],\n        'sort': [{ type: core_1.Output },],\n        'page': [{ type: core_1.Output },],\n        'reorder': [{ type: core_1.Output },],\n        'resize': [{ type: core_1.Output },],\n        'tableContextmenu': [{ type: core_1.Output },],\n        'isFixedHeader': [{ type: core_1.HostBinding, args: ['class.fixed-header',] },],\n        'isFixedRow': [{ type: core_1.HostBinding, args: ['class.fixed-row',] },],\n        'isVertScroll': [{ type: core_1.HostBinding, args: ['class.scroll-vertical',] },],\n        'isHorScroll': [{ type: core_1.HostBinding, args: ['class.scroll-horz',] },],\n        'isSelectable': [{ type: core_1.HostBinding, args: ['class.selectable',] },],\n        'isCheckboxSelection': [{ type: core_1.HostBinding, args: ['class.checkbox-selection',] },],\n        'isCellSelection': [{ type: core_1.HostBinding, args: ['class.cell-selection',] },],\n        'isSingleSelection': [{ type: core_1.HostBinding, args: ['class.single-selection',] },],\n        'isMultiSelection': [{ type: core_1.HostBinding, args: ['class.multi-selection',] },],\n        'isMultiClickSelection': [{ type: core_1.HostBinding, args: ['class.multi-click-selection',] },],\n        'columnTemplates': [{ type: core_1.ContentChildren, args: [columns_1.DataTableColumnDirective,] },],\n        'rowDetail': [{ type: core_1.ContentChild, args: [row_detail_1.DatatableRowDetailDirective,] },],\n        'footer': [{ type: core_1.ContentChild, args: [footer_1.DatatableFooterDirective,] },],\n        'bodyComponent': [{ type: core_1.ViewChild, args: [body_1.DataTableBodyComponent,] },],\n        'onWindowResize': [{ type: core_1.HostListener, args: ['window:resize',] },],\n    };\n    __decorate([\n        utils_1.throttleable(5),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], DatatableComponent.prototype, \"onWindowResize\", null);\n    return DatatableComponent;\n}());\nexports.DatatableComponent = DatatableComponent;\n",null]}